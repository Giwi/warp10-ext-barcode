{
  'name' 'BARCODE'
  'desc'
    <'
Generates a barcode image using [Google](https://google.com/)'s [Zxing](https://opensource.google.com/projects/zxing) library.

It supports all barcode formats that the library can generate. The type of image to produce is chosen using the `format` key of the parameter map to the function with the following options:

| Value | Barcode format |
|-------|----------------|
| `AZTEC` | Aztec 2D barcode format |
| `CODABAR` | CODABAR 1D format |
| `CODE_39` | Code 39 1D format |
| `CODE_93` | Code 93 1D format |
| `CODE_128` | Code 128 1D format |
| `DATA_MATRIX` | Data Matrix 2D barcode format |
| `EAN_8` | EAN-8 1D format |
| `EAN_13` | EAN-13 1D format |
| `ITF` | ITF (Interleaved Two of Five) 1D format |
| `MAXICODE` | MaxiCode 2D barcode format |
| `PDF_417` | PDF417 format |
| `QR_CODE` | QR Code 2D barcode format, this is the default |
| `RSS_14` | RSS 14 |
| `RSS_EXPANDED` | RSS EXPANDED |
| `UPC_A` | UPC-A 1D format |
| `UPC_E` | UPC-E 1D format |
| `UPC_EAN_EXTENSION` | UPC/EAN extension format. Not a stand-alone format |

The parameter map can also contain the following generic keys:

| Key | Description |
|-----|-------------|
| width | Desired width of the resulting image, may be adapted by the format encoder |
| height | Desired height of the resulting image, may be adapted by the format encoder |
| content | Content to encode in the barcode, supported characters and length depends on the selected barcode format |

Additionally, the map can include *hint* keys which will be interpreted by the various encoders, the list of supported keys is `ERROR_CORRECTION`, `CHARACTER_SET`, `DATA_MATRIX_SHAPE`, `MARGIN`, `PDF417_COMPACT`, `PDF417_COMPACTION`, `PDF417_DIMENSIONS` (`[ minCols maxCols minRows maxRows ]`), `AZTEC_LAYERS`, `QR_VERSION`, `GS1_FORMAT`. See the detailed descriptions in the [ZXing source code](https://github.com/zxing/zxing/blob/master/core/src/main/java/com/google/zxing/EncodeHintType.java).

    '>
  'sig' [ [ [ 'params:MAP' ] [ 'barcode:PIMAGE' ] ] ]
  'params' {
    'params' 'Map of parameters, see description for details.'
    'barcode' 'Resulting barcode image.'
  }
  'examples' [
    <'
{
  'format' 'QR_CODE'
  'width' 100
  'height' 100
  'content' 'Hello Warp10'
}
BARCODE
    '>
  ]
  'conf' [ 'warpscript.extensions' ]
  } 'info' STORE
<%
  !$info INFO
  SAVE 'context' 
    <% 'BARCODE' EVAL %>
    <% %>
    <% %>
    TRY
    // Code of the actual macro
  $context RESTORE
%>
'macro' STORE
// Unit tests
$macro